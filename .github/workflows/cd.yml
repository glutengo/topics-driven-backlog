name: CD

on:
  push:
    branches:
      - master

jobs:
  push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: Set env
        id: vars
        run: echo "::set-output name=IMAGE_TAG::$(git rev-parse --short HEAD)"
      - name: docker build
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_TAG: ${{ steps.vars.outputs.IMAGE_TAG }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
          docker build -f .docker/Dockerfile.production -t $DOCKER_USER/topics-driven-backlog:$IMAGE_TAG .
          docker push $DOCKER_USER/topics-driven-backlog:$IMAGE_TAG
  deploy:
    name: Deploy New Version on Server
    needs: [push]
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: Set env
        id: vars
        run: echo "::set-output name=IMAGE_TAG::$(git rev-parse --short HEAD)"
      - name: Upload compose file
        uses: appleboy/scp-action@v0.0.8
        env:
          HOST: ${{ secrets.SSH_HOST }}
          USERNAME: ${{ secrets.SSH_USER }}
          KEY: ${{ secrets.SSH_KEY }}
        with:
          source: ".docker/docker-compose.production.yml,.docker/variables.production.env"
          target: "topics-driven-backlog"
          strip_components: 1
      - name: start application
        uses: appleboy/ssh-action@v0.0.9
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            export set SECRET_KEY_BASE=${{ secrets.SECRET_KEY_BASE }}
            export set LDAP_HOST=${{ secrets.LDAP_HOST }}
            export set LDAP_PORT=${{ secrets.LDAP_PORT }}
            export set LDAP_CONNECTSTRING=${{ secrets.LDAP_CONNECTSTRING }}
            export set LDAP_STUDENT_GROUP=${{ secrets.LDAP_STUDENT_GROUP }}
            export set LDAP_INSTRUCTOR_GROUP=${{ secrets.LDAP_INSTRUCTOR_GROUP }}
            export set TAG=${{ steps.vars.outputs.IMAGE_TAG }}
            docker container stop $(docker container ls -aq)
            docker system prune --all --force
            docker-compose -f topics-driven-backlog/docker-compose.production.yml up -d
            docker-compose -f topics-driven-backlog/docker-compose.production.yml exec -T app .docker/wait-for-db.sh
            docker-compose -f topics-driven-backlog/docker-compose.production.yml exec -T  app bundle exec rake db:migrate
